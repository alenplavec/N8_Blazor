@page "/izdelki"
@inject HttpClient Http
@using blazor_n8.Models
@using System.Text.Json
@using System.Text
@using Microsoft.AspNetCore.Components.Forms

<h3>Izdelki</h3>
<button class="btn btn-primary" @onclick="() => UrediIzdelek(new Izdelek())">Dodaj Izdelek</button>

<div class="mb-3">
    <select @onchange="ObSpremembiAtributa" class="form-select btn btn-secondary">
        <option value="Naziv">Naziv</option>
        <option value="Kategorija">Kategorija</option>
        <option value="Cena">Cena</option>
    </select>

    <button class="btn btn-secondary" @onclick="() => SmerSortiranjaSpremenjena()">Sortiraj: @(sortiranjePadajoce ? "Padajoče" : "Naraščajoče")</button>
</div>

@if (izdelki == null)
{
        <p><em>Nalaganje...</em></p>
}
else
{
        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th @onclick='() => Sortiraj("Naziv")'>Naziv</th>
                    <th>Opis</th>
                    <th @onclick='() => Sortiraj("Kategorija")'>Kategorija</th>
                    <th @onclick='() => Sortiraj("Cena")'>Cena</th>
                    <th>
                        <button class="btn btn-secondary" @onclick="() => PrikaziDobavitelje(-1)">Skrij Dobavitelje</button>
                    </th>
                    <th>Odstrani</th>
                    <th>Uredi</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var izdelek in izdelki)
            {
                <tr>
                    <td>@izdelek.Id</td>
                    <td>@izdelek.Naziv</td>
                    <td>@izdelek.Opis</td>
                    <td>@izdelek.Kategorija</td>
                    <td>@izdelek.Cena</td>
                    <td>
                        <button class="btn btn-info" @onclick="() => PrikaziDobavitelje(izdelek.Id)">Prikaži Dobavitelje</button>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => OdstraniIzdelek(izdelek)">Odstrani</button>
                    </td>
                     <td>
                    <button class="btn btn-secondary" @onclick="() => UrediIzdelek(izdelek)">Uredi</button>
                </td>
                </tr>
            }
            </tbody>
        </table>
        //<h4>Najvišja cena:@PrikaziNajvisjoCeno()@najvisjaCena</h4>
        <h5>Povprečna cena: @povprecnaCena</h5>
        <h5>Izdelek z najvišjo ceno: @izdelekNajvisjaCena.Id | @izdelekNajvisjaCena.Naziv | @izdelekNajvisjaCena.Cena</h5><br/><br/>


}

@if (dobavitelji != null)
{
        <h4>Dobavitelji za izbrani izdelek</h4>
        <ul>
        @foreach (var dobavitelj in dobavitelji)
        {
                <li>@dobavitelj.Naziv</li>
        }
        </ul>
}

@if (trenutniIzdelek != null)
{
    <EditForm Model="trenutniIzdelek" OnValidSubmit="ShraniIzdelek">
        <InputText @bind-Value="trenutniIzdelek.Naziv" />
        <InputText @bind-Value="trenutniIzdelek.Opis" />
        <InputText @bind-Value="trenutniIzdelek.Kategorija" />
        <InputNumber @bind-Value="trenutniIzdelek.Cena" />
        <button type="submit" class="btn btn-success">Shrani</button>
    </EditForm>
}


@code {
    private Izdelek izdelekNajvisjaCena;
    private Izdelek trenutniIzdelek;
    private decimal povprecnaCena = 0;
    private List<Izdelek> izdelki;
    private List<Dobavitelj> dobavitelji;
    private string trenutniStolpecZaSortiranje;
    private bool sortiranjePadajoce = false;

    protected override async Task OnInitializedAsync()
    {
        await NaloziIzdelke();
    }

    private async Task NaloziIzdelke()
    {
        await PrikaziNajvisjoCeno();
        await PrikaziPovprecnoCeno();
        var url = $"/izdelki?sortAttribute={trenutniStolpecZaSortiranje}&descending={(sortiranjePadajoce ? "true" : "false")}";
        izdelki = await Http.GetFromJsonAsync<List<Izdelek>>(url);
        StateHasChanged();
    }

    private async Task Sortiraj(string imeStolpca)
    {
        if (imeStolpca == trenutniStolpecZaSortiranje)
        {
            sortiranjePadajoce = !sortiranjePadajoce;
        }
        else
        {
            trenutniStolpecZaSortiranje = imeStolpca;
            sortiranjePadajoce = false;
        }

        await NaloziIzdelke();
    }

    private async Task ObSpremembiAtributa(ChangeEventArgs e)
    {
        trenutniStolpecZaSortiranje = e.Value.ToString();
        await NaloziIzdelke();
    }

    private async Task SmerSortiranjaSpremenjena()
    {
        sortiranjePadajoce = !sortiranjePadajoce;
        await NaloziIzdelke();
    }

    private async Task PrikaziDobavitelje(int izdelekId)
    {
        if (izdelekId != -1)
            dobavitelji = await Http.GetFromJsonAsync<List<Dobavitelj>>($"/izdelki/{izdelekId}/dobavitelji");
        else dobavitelji = null;
    }

    private async Task OdstraniIzdelek(Izdelek izdelek)
    {
        var odgovor = await Http.DeleteAsync($"/izdelki/odstraniIzdelek/{izdelek.Id}");

        if (odgovor.IsSuccessStatusCode)
        {
            izdelki.Remove(izdelek);
            NaloziIzdelke();
            StateHasChanged();
        }
    }

    private async Task PrikaziNajvisjoCeno()
    {
        izdelekNajvisjaCena = await Http.GetFromJsonAsync<Izdelek>("/izdelki/najvisjaCena");
    }

    private async Task PrikaziPovprecnoCeno()
    {
        povprecnaCena = await Http.GetFromJsonAsync<decimal>("/izdelki/povprecnaCena");
    }

    private void UrediIzdelek(Izdelek izdelek)
    {
        trenutniIzdelek = izdelek;
    }

    private async Task ShraniIzdelek()
    {
      HttpResponseMessage odgovor;
        if (trenutniIzdelek.Id == 0)
        {
            odgovor = await Http.PostAsJsonAsync("/izdelki/dodajIzdelek", trenutniIzdelek);
        }
        else
        {
            odgovor = await Http.PutAsJsonAsync($"/izdelki/urediIzdelek/{trenutniIzdelek.Id}", trenutniIzdelek);
        }

        if (odgovor.IsSuccessStatusCode)
        {
            trenutniIzdelek = null;
            await NaloziIzdelke();
        }
    }
}